package com.tenerdy.mobile_chat.bean.Mapper;

import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import com.tenerdy.mobile_chat.bean.ChatRecordVO;
import com.tenerdy.mobile_chat.bean.LatestChatRecordVO;
import com.tenerdy.mobiledomain.entity.SingleChatRecord;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

import java.util.List;

@Mapper
public interface SingleChatRecordMapper extends BaseMapper<SingleChatRecord> {
//            @Select({"<script>",
//            "SET @fromId = #{fromId};",
//            "CREATE TEMPORARY TABLE single_chats",
//            "SELECT",
//            "  IF(sc.from_id = #{fromId}, sc.to_id, sc.from_id) AS user_id,",
//            "  ui.nickname,",
//            "  ui.picture,",
//            "  sc.content,",
//            "  sc.time,",
//            "  sc.type,",
//            "  (",
//            "    SELECT COUNT(*)",
//            "    FROM single_chat_record AS scr",
//            "    WHERE scr.to_id = #{fromId} AND scr.from_id = user_id",
//            "      AND scr.isread = 0 AND scr.from_id != #{fromId}",
//            "  ) AS countNotRead",
//            "FROM (",
//            "  SELECT *",
//            "  FROM single_chat_record",
//            "  WHERE record_id IN (",
//            "    SELECT MAX(record_id)",
//            "    FROM single_chat_record",
//            "    WHERE (from_id = #{fromId} AND isread = 1) OR to_id = #{fromId}",
//            "    GROUP BY LEAST(from_id, to_id), GREATEST(from_id, to_id)",
//            "  )",
//            ") AS sc",
//            "JOIN user_info AS ui",
//            "  ON (ui.user_id = sc.from_id AND sc.to_id = #{fromId})",
//            "  OR (ui.user_id = sc.to_id AND sc.from_id = #{fromId});",
//            "CREATE TEMPORARY TABLE group_chats",
//            "SELECT",
//            "  cg.group_id,",
//            "  cg.group_name,",
//            "  gcr.content,",
//            "  gcr.time,",
//            "  gcr.type,",
//            "  (",
//            "    SELECT COUNT(*)",
//            "    FROM group_chat_record AS gcr",
//            "    JOIN group_chat_read AS gcr_read ON gcr.record_id = gcr_read.record_id",
//            "    WHERE gcr.group_id = cg.group_id",
//            "      AND gcr_read.user_id = #{fromId}",
//            "      AND gcr_read.isread = 0",
//            "  ) AS countNotRead",
//            "FROM user_group AS ug",
//            "JOIN chat_group AS cg ON ug.group_id = cg.group_id",
//            "JOIN group_chat_record AS gcr ON cg.group_id = gcr.group_id",
//            "WHERE ug.user_id = #{fromId}",
//            "  AND gcr.record_id IN (",
//            "    SELECT MAX(record_id)",
//            "    FROM group_chat_record",
//            "    WHERE group_id IN (SELECT group_id FROM user_group WHERE user_id = #{fromId})",
//            "    GROUP BY group_id",
//            "  );",
//            "SELECT",
//            "  user_id AS id,",
//            "  nickname,",
//            "  picture,",
//            "  content,",
//            "  time,",
//            "  type,",
//            "  countNotRead",
//            "FROM single_chats",
//            "UNION ALL",
//            "SELECT",
//            "  group_id AS id,",
//            "  group_name AS nickname,",
//            "  NULL AS picture,",
//            "  content,",
//            "  time,",
//             " type,",
//            "  countNotRead",
//            "FROM group_chats",
//            "ORDER BY time DESC;",
//            "DROP TEMPORARY TABLE single_chats;",
//            "DROP TEMPORARY TABLE group_chats;",
//            "</script>"})
//    List<LatestChatRecordVO> getChatRecordByFromId(Integer fromId);


    @Select({"<script>",
            "SET @fromId = #{fromId};",
            "CREATE TEMPORARY TABLE single_chats",
            "SELECT",
            "  IF(sc.from_id = #{fromId}, sc.to_id, sc.from_id) AS user_id,",
            "  ui.nickname,",
            "  ui.picture,",
            "  sc.content,",
            "  sc.time,",
            "  sc.type,",
            "  (",
            "    SELECT COUNT(*)",
            "    FROM single_chat_record AS scr",
            "    WHERE scr.to_id = #{fromId} AND scr.from_id = user_id",
            "      AND scr.isread = 0 AND scr.from_id != #{fromId}",
            "  ) AS countNotRead",
            "FROM (",
            "  SELECT *",
            "  FROM single_chat_record",
            "  WHERE record_id IN (",
            "    SELECT MAX(record_id)",
            "    FROM single_chat_record",
            "    WHERE (from_id = #{fromId}) OR to_id = #{fromId}",
            "    GROUP BY LEAST(from_id, to_id), GREATEST(from_id, to_id)",
            "  )",
            ") AS sc",
            "JOIN user_info AS ui",
            "  ON (ui.user_id = sc.from_id AND sc.to_id = #{fromId})",
            "  OR (ui.user_id = sc.to_id AND sc.from_id = #{fromId});",
            "CREATE TEMPORARY TABLE group_chats",
            "SELECT",
            "  cg.group_id,",
            "  cg.group_name,",
            "  gcr.content,",
            "  gcr.time,",
            "  gcr.type,",
            "  (",
            "    SELECT COUNT(*)",
            "    FROM group_chat_record AS gcr",
            "    JOIN group_chat_read AS gcr_read ON gcr.record_id = gcr_read.record_id",
            "    WHERE gcr.group_id = cg.group_id",
            "      AND gcr_read.user_id = #{fromId}",
            "      AND gcr_read.isread = 0",
            "  ) AS countNotRead",
            "FROM user_group AS ug",
            "JOIN chat_group AS cg ON ug.group_id = cg.group_id",
            "JOIN group_chat_record AS gcr ON cg.group_id = gcr.group_id",
            "WHERE ug.user_id = #{fromId}",
            "  AND gcr.record_id IN (",
            "    SELECT MAX(record_id)",
            "    FROM group_chat_record",
            "    WHERE group_id IN (SELECT group_id FROM user_group WHERE user_id = #{fromId})",
            "    GROUP BY group_id",
            "  );",
            "SELECT",
            "  user_id AS id,",
            "  nickname,",
            "  picture,",
            "  content,",
            "  time,",
            "  type,",
            "  countNotRead",
            "FROM single_chats",
            "UNION ALL",
            "SELECT",
            "  group_id AS id,",
            "  group_name AS nickname,",
            "  NULL AS picture,",
            "  content,",
            "  time,",
            " type,",
            "  countNotRead",
            "FROM group_chats",
            "ORDER BY time DESC;",
            "DROP TEMPORARY TABLE single_chats;",
            "DROP TEMPORARY TABLE group_chats;",
            "</script>"})
    List<LatestChatRecordVO> getChatRecordByFromId(Integer fromId);

    @Select({"<script>",
            "SET @fromId = #{param1};",
            "CREATE TEMPORARY TABLE single_chats",
            "SELECT",
            "  IF(sc.from_id = #{param1}, sc.to_id, sc.from_id) AS user_id,",
            "  ui.nickname,",
            "  ui.picture,",
            "  sc.content,",
            "  sc.time,",
            "  sc.type,",
            "  (",
            "    SELECT COUNT(*)",
            "    FROM single_chat_record AS scr",
            "    WHERE scr.to_id = #{param1} AND scr.from_id = user_id",
            "      AND scr.isread = 0 AND scr.from_id != #{param1}",
            "  ) AS countNotRead",
            "FROM (",
            "  SELECT *",
            "  FROM single_chat_record",
            "  WHERE record_id IN (",
            "    SELECT MAX(record_id)",
            "    FROM single_chat_record",
            "    WHERE (from_id = #{param1}) OR to_id = #{param1}",
            "    GROUP BY LEAST(from_id, to_id), GREATEST(from_id, to_id)",
            "  )",
            ") AS sc",
            "JOIN user_info AS ui",
            "  ON (ui.user_id = sc.from_id AND sc.to_id = #{param1})",
            "  OR (ui.user_id = sc.to_id AND sc.from_id = #{param1})",
            "WHERE ui.nickname LIKE CONCAT('%', #{param2}, '%');",
            "CREATE TEMPORARY TABLE group_chats",
            "SELECT",
            "  cg.group_id,",
            "  cg.group_name,",
            "  gcr.content,",
            "  gcr.time,",
            "  gcr.type,",
            "  (",
            "    SELECT COUNT(*)",
            "    FROM group_chat_record AS gcr",
            "    JOIN group_chat_read AS gcr_read ON gcr.record_id = gcr_read.record_id",
            "    WHERE gcr.group_id = cg.group_id",
            "      AND gcr_read.user_id = #{param1}",
            "      AND gcr_read.isread = 0",
            "  ) AS countNotRead",
            "FROM user_group AS ug",
            "JOIN chat_group AS cg ON ug.group_id = cg.group_id",
            "JOIN group_chat_record AS gcr ON cg.group_id = gcr.group_id",
            "WHERE ug.user_id = #{param1}",
            "  AND gcr.record_id IN (",
            "    SELECT MAX(record_id)",
            "    FROM group_chat_record",
            "    WHERE group_id IN (SELECT group_id FROM user_group WHERE user_id = #{param1})",
            "    GROUP BY group_id",
            "  )",
            "  AND cg.group_name LIKE CONCAT('%', #{param2}, '%');",
            "SELECT",
            "  user_id AS id,",
            "  nickname,",
            "  picture,",
            "  content,",
            "  time,",
            "  type,",
            "  countNotRead",
            "FROM single_chats",
            "UNION ALL",
            "SELECT",
            "  group_id AS id,",
            "  group_name AS nickname,",
            "  NULL AS picture,",
            "  content,",
            "  time,",
            "  type,",
            "  countNotRead",
            "FROM group_chats",
            "ORDER BY time DESC;",
            "DROP TEMPORARY TABLE single_chats;",
            "DROP TEMPORARY TABLE group_chats;",
            "</script>"})
    List<LatestChatRecordVO> SearchChatByNickname(Integer fromId,String nickname);

    @Select("SELECT " +
            "CASE WHEN from_id=#{param1} THEN 'mine' ELSE 'others' END AS isMine, " +
            "content,type," +
            "time " +
            "FROM single_chat_record " +
            "WHERE (from_id=#{param1} AND to_id=#{param2}) OR (from_id=#{param2} AND to_id=#{param1}) " +
            "ORDER BY time")
    List<ChatRecordVO> getChatRecord(Integer fromId, Integer toId);


    @Select("SELECT * FROM single_chat_record WHERE (from_id=#{param1} AND to_id=#{param2}) OR (from_id=#{param2} AND to_id=#{param1})")
    List<SingleChatRecord> getChatRecordByFromIdAndToId(Integer fromId, Integer toId);

    @Update("UPDATE single_chat_record SET isread=#{param3} WHERE (from_id=#{param1} AND to_id=#{param2}) OR (from_id=#{param2} AND to_id=#{param1}) ")
     int setMessageRead(Integer fromId,Integer toId,Integer isread);
}
